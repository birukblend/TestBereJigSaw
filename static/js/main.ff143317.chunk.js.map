{"version":3,"sources":["Game.js","Login.jsx","App.js","reportWebVitals.js","index.js"],"names":["DraggableBox","_ref","id","text","isDragging","drag","useDrag","type","item","collect","monitor","React","createElement","ref","style","padding","margin","backgroundColor","cursor","textAlign","DropZone","_ref2","imageUrl","onDrop","isCorrect","isOver","drop","useDrop","accept","width","height","border","backgroundImage","backgroundSize","opacity","StartPage","_ref3","onStart","onClick","fontSize","Game","score","setScore","useState","errors","setErrors","milliseconds","setMilliseconds","gameOver","setGameOver","userName","setUserName","leaderboard","setLeaderboard","gameStarted","setGameStarted","boxes","setBoxes","correctImageId","droppedBoxes","setDroppedBoxes","formatTime","ms","minutes","Math","floor","seconds","String","padStart","useEffect","interval","setInterval","prev","clearInterval","handleDrop","boxId","targetImageId","find","b","[object Object]","Object","keys","length","every","box","handleGameOver","newEntry","name","time","savedLeaderboard","JSON","parse","localStorage","getItem","existingEntryIndex","findIndex","entry","existingEntry","push","sort","a","setItem","stringify","display","justifyContent","flexGrow","gridTemplateColumns","gridGap","marginBottom","slice","map","index","key","assign","placeholder","value","onChange","e","target","required","handleRestart","array","randomIndex","currentIndex","random","shuffleBoxes","marginTop","handleMenu","borderLeft","Login","onLogin","setName","phone","setPhone","onSubmit","preventDefault","alert","marginLeft","App","user","setUser","storedUser","DndProvider","backend","HTML5Backend","handleStartGame","handleLogout","removeItem","userData","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sOAKA,MAGMA,EAAeC,IAAkB,IAAjBC,GAAEA,EAAEC,KAAEA,GAAMF,EAChC,OAAOG,WAAEA,GAAcC,GAAQC,YAAQ,MACrCC,KALc,MAMdC,KAAM,CAAEN,MACRO,QAAUC,IAAO,CACfN,WAAYM,EAAQN,kBAIxB,OACEO,IAAAC,cAAA,OACEC,IAAKR,EACLS,MAAO,CACLC,QAAS,OACTC,OAAQ,IACRC,gBAAiBb,EAAa,aAAe,YAC7Cc,OAAQ,OACRC,UAAW,WAGZhB,IAMDiB,EAAWC,IAAyC,IAAxCnB,GAAEA,EAAEoB,SAAEA,EAAQC,OAAEA,EAAMC,UAAEA,GAAWH,EACnD,OAAOI,OAAEA,GAAUC,GAAQC,YAAQ,MACjCC,OA/Bc,MAgCdF,KAAOlB,GAASe,EAAOf,EAAKN,GAAIA,GAChCO,QAAUC,IAAO,CACfe,OAAQf,EAAQe,cAIpB,OACEd,IAAAC,cAAA,OACEC,IAAKa,EACLZ,MAAO,CACLe,MAAO,QACPC,OAAQ,QACRd,OAAQ,IACRe,OAAQ,kBACRC,uBAAwBV,KACxBW,eAAgB,QAChBC,QAAST,EAAS,GAAM,EACxBR,gBAAiBO,EAAY,aAAe,OAO9CW,EAAYC,IAAiB,IAAhBC,QAAEA,GAASD,EAC5B,OACEzB,IAAAC,cAAA,OAAKE,MAAO,CAAEK,UAAW,SAAUJ,QAAS,SAC1CJ,IAAAC,cAAA,UAAI,sCACJD,IAAAC,cAAA,UAAQ0B,QAASD,EAASvB,MAAO,CAAEC,QAAS,OAAQwB,SAAU,SAAU,gBA+N/DC,MAxNFA,KACX,MAAOC,EAAOC,GAAYC,mBAAS,IAC5BC,EAAQC,GAAaF,mBAAS,IAC9BG,EAAcC,GAAmBJ,mBAAS,IAC1CK,EAAUC,GAAeN,oBAAS,IAClCO,EAAUC,GAAeR,mBAAS,KAClCS,EAAaC,GAAkBV,mBAAS,KACxCW,EAAaC,GAAkBZ,oBAAS,IAExCa,EAAOC,GAAYd,mBAAS,CACjC,CAAEzC,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,aAGrCC,EAAcC,GAAmBjB,mBAAS,IAG3CkB,EAAcC,IAClB,MAAMC,EAAUC,KAAKC,MAAMH,EAAK,KAC1BI,EAAUF,KAAKC,MAAOH,EAAK,IAAS,KACpChB,EAAegB,EAAK,IAC1B,SAAUK,OAAOJ,GAASK,SAAS,EAAG,QAAQD,OAAOD,GAASE,SAAS,EAAG,QAAQD,OAAOrB,GAAcsB,SAAS,EAAG,QAGrHC,oBAAU,KACR,IAAKrB,GAAYM,EAAa,CAC5B,MAAMgB,EAAWC,YAAY,KAC3BxB,EAAiByB,GAASA,EAAO,KAChC,IAEH,MAAO,IAAMC,cAAcH,KAE5B,CAACtB,EAAUM,IAEd,MAAMoB,EAAaA,CAACC,EAAOC,KACbpB,EAAMqB,KAAMC,GAAMA,EAAE5E,KAAOyE,GAC/BjB,iBAAmBkB,GACzBlC,EAAU8B,GAASA,EAAO,GAC1BZ,EAAiBY,IAAI,IAAWA,EAAMO,CAACJ,IAAQ,OAE/C9B,EAAW2B,GAASA,EAAO,GAC3BZ,EAAiBY,IAAI,IAAWA,EAAMO,CAACJ,IAAQ,OAInDN,oBAAU,KACJW,OAAOC,KAAKtB,GAAcuB,SAAW1B,EAAM0B,QAC1B1B,EAAM2B,MAAOC,IAAiC,IAAzBzB,EAAayB,EAAIlF,OAEvD+C,GAAY,GACZoC,MAGH,CAAC1B,EAAcH,IAElB,MAeM6B,EAAiBA,KACrB,MAAMC,EAAW,CACfC,KAAMrC,EACNsC,KAAM1C,EACNF,OAAQA,GAGJ6C,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,GAEtEC,EAAqBL,EAAiBM,UAAUC,GAASA,EAAMT,OAASrC,GAC9E,GAAI4C,GAAsB,EAAG,CAC3B,MAAMG,EAAgBR,EAAiBK,IAEnChD,EAAemD,EAAcT,MAAS1C,IAAiBmD,EAAcT,MAAQ5C,EAASqD,EAAcrD,UACtG6C,EAAiBK,GAAsBR,QAGzCG,EAAiBS,KAAKZ,GAGxBG,EAAiBU,KAAK,CAACC,EAAGtB,IACpBsB,EAAEZ,OAASV,EAAEU,KACRY,EAAExD,OAASkC,EAAElC,OAEfwD,EAAEZ,KAAOV,EAAEU,MAGpBI,aAAaS,QAAQ,cAAeX,KAAKY,UAAUb,IACnDpC,EAAeoC,IA6BjB,OAAKnC,EAKH3C,IAAAC,cAAA,OAAKE,MAAO,CAAEyF,QAAS,OAAQC,eAAgB,kBAE7C7F,IAAAC,cAAA,OAAKE,MAAO,CAAEK,UAAW,SAAUsF,SAAU,IAC3C9F,IAAAC,cAAA,UAAI,sBACJD,IAAAC,cAAA,UAAI,UAAQ6B,GACZ9B,IAAAC,cAAA,UAAI,WAASgC,GACbjC,IAAAC,cAAA,UAAI,UAAQiD,EAAWf,IAAmB,IAG1CnC,IAAAC,cAAA,OAAKE,MAAO,CACVyF,QAAS,OACTG,oBAAqB,mBACrBC,QAAS,MACTH,eAAgB,SAChBI,aAAc,SAEbpD,EAAMqD,MAAM,EAAG,GAAGC,IAAI,CAAC1B,EAAK2B,IAC3BpG,IAAAC,cAACQ,EAAQ,CACP4F,IAAKD,EACL7G,WAAY6G,EAAQ,IACpBzF,sDAAuDyF,EAAQ,IAC/DxF,OAAQmD,EACRlD,WAAoC,IAAzBmC,EAAayB,EAAIlF,QAMlCS,IAAAC,cAAA,OAAKE,MAAO,CACVyF,QAAS,OACTG,oBAAqB,mBACrBC,QAAS,MACTH,eAAgB,WAEfhD,EAAMsD,IAAK1B,GACVzE,IAAAC,cAACZ,EAAYgF,OAAAiC,OAAA,CAACD,IAAK5B,EAAIlF,IAAQkF,MAIlCpC,GACCrC,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,SACEL,KAAK,OACL2G,YAAY,kBACZC,MAAOjE,EACPkE,SAAWC,GAAMlE,EAAYkE,EAAEC,OAAOH,OACtCI,UAAQ,KAKd5G,IAAAC,cAAA,UAAQ0B,QAnFQkF,KACpB9E,EAAS,GACTG,EAAU,GACVE,EAAgB,GAChBa,EAAgB,IAChBX,GAAY,GACZE,EAAY,IAEZM,EAtDoBgE,KACpB,IAAiCC,EAA7BC,EAAeF,EAAMvC,OAGzB,KAAwB,IAAjByC,GACLD,EAAc1D,KAAKC,MAAMD,KAAK4D,SAAWD,GACzCA,KAGCF,EAAME,GAAeF,EAAMC,IAAgB,CAACD,EAAMC,GAAcD,EAAME,IAGzE,OAAOF,GA0CEI,CAAa,CACpB,CAAE3H,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,UAC1C,CAAExD,GAAI,IAAKC,KAAM,QAASuD,eAAgB,cAkER5C,MAAO,CAAEC,QAAS,OAAQ+G,UAAW,SAAU,WAK/EnH,IAAAC,cAAA,UAAQ0B,QAnEKyF,KACjBxE,GAAe,IAkEkBzC,MAAO,CAAEC,QAAS,OAAQ+G,UAAW,SAAU,SAM9EnH,IAAAC,cAAA,OAAKE,MAAO,CAAEe,MAAO,QAASV,UAAW,OAAQJ,QAAS,OAAQE,gBAAiB,UAAW+G,WAAY,mBACxGrH,IAAAC,cAAA,UAAI,eACJD,IAAAC,cAAA,UACGwC,EAAY0D,IAAI,CAACd,EAAOe,IACvBpG,IAAAC,cAAA,MAAIoG,IAAKD,GACNf,EAAMT,KAAK,KAAG1B,EAAWmC,EAAMR,MAAM,cAAYQ,EAAMpD,YAxE3DjC,IAAAC,cAACuB,EAAS,CAACE,QAASA,IAAMkB,GAAe,MC3JrC0E,MAjDDhI,IAAiB,IAAhBiI,QAAEA,GAASjI,EACxB,MAAOsF,EAAM4C,GAAWxF,mBAAS,KAC1ByF,EAAOC,GAAY1F,mBAAS,IAenC,OACEhC,IAAAC,cAAA,OAAKE,MAAO,CAAEK,UAAW,SAAU2G,UAAW,SAC5CnH,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,QAAM0H,SAhBYjB,IACpBA,EAAEkB,iBAGGhD,GAAS6C,EAMdF,EAAQ,CAAE3C,OAAM6C,UALdI,MAAM,gCAWwB1H,MAAO,CAAEyF,QAAS,eAAgBpF,UAAW,SACzER,IAAAC,cAAA,OAAKE,MAAO,CAAE8F,aAAc,SAC1BjG,IAAAC,cAAA,aAAO,QAELD,IAAAC,cAAA,SACEL,KAAK,OACL4G,MAAO5B,EACP6B,SAAWC,GAAMc,EAAQd,EAAEC,OAAOH,OAClCrG,MAAO,CAAE2H,WAAY,YAI3B9H,IAAAC,cAAA,OAAKE,MAAO,CAAE8F,aAAc,SAC1BjG,IAAAC,cAAA,aAAO,gBAELD,IAAAC,cAAA,SACEL,KAAK,MACL4G,MAAOiB,EACPhB,SAAWC,GAAMgB,EAAShB,EAAEC,OAAOH,OACnCrG,MAAO,CAAE2H,WAAY,YAI3B9H,IAAAC,cAAA,UAAQL,KAAK,UAAS,aCafmI,MApDHA,KACV,MAAOC,EAAMC,GAAWjG,mBAAS,OAC1BW,EAAaC,GAAkBZ,oBAAS,GAG/C0B,oBAAU,KACR,MAAMwE,EAAajD,aAAaC,QAAQ,QACpCgD,GACFD,EAAQlD,KAAKC,MAAMkD,KAEpB,IAiBH,OACElI,IAAAC,cAAA,WACI+H,EAEGrF,EAaH3C,IAAAC,cAACkI,IAAW,CAACC,QAASC,KACpBrI,IAAAC,cAAC4B,EAAI,OAbP7B,IAAAC,cAAA,OAAKE,MAAO,CAAEK,UAAW,SAAU2G,UAAW,SAC5CnH,IAAAC,cAAA,UAAI,YAAU+H,EAAKpD,KAAK,KACxB5E,IAAAC,cAAA,SAAG,UAAQ+H,EAAKP,OAChBzH,IAAAC,cAAA,UAAQ0B,QAlBQ2G,KACtB1F,GAAe,IAiByBzC,MAAO,CAAEC,QAAS,YAAawB,SAAU,SAAU,cAGrF5B,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQ0B,QAlBK4G,KACnBN,EAAQ,MACRrF,GAAe,GACfqC,aAAauD,WAAW,SAearI,MAAO,CAAEC,QAAS,WAAY+G,UAAW,OAAQvF,SAAU,SAAU,WATtG5B,IAAAC,cAACqH,EAAK,CAACC,QAlBQkB,IACnBR,EAAQQ,GACRxD,aAAaS,QAAQ,OAAQX,KAAKY,UAAU8C,SCTjCC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAnC,EAAA,GAAAoC,KAAAD,EAAAE,KAAA,UAAqBD,KAAKxJ,IAAiD,IAAhD0J,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAAS9J,EACpE0J,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzJ,IAAAC,cAACD,IAAM0J,WAAU,KACf1J,IAAAC,cAAC8H,EAAG,QAORW","file":"static/js/main.ff143317.chunk.js","sourcesContent":["// src/Game.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nconst ITEM_TYPE = 'BOX';\r\n\r\n// DraggableBox component\r\nconst DraggableBox = ({ id, text }) => {\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: ITEM_TYPE,\r\n    item: { id },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  return (\r\n    <div\r\n      ref={drag}\r\n      style={{\r\n        padding: '10px',\r\n        margin: '0', // Remove margin to reduce spacing\r\n        backgroundColor: isDragging ? 'lightgreen' : 'lightblue',\r\n        cursor: 'move',\r\n        textAlign: 'center',\r\n      }}\r\n    >\r\n      {text}\r\n    </div>\r\n  );\r\n};\r\n\r\n// DropZone component\r\nconst DropZone = ({ id, imageUrl, onDrop, isCorrect }) => {\r\n  const [{ isOver }, drop] = useDrop(() => ({\r\n    accept: ITEM_TYPE,\r\n    drop: (item) => onDrop(item.id, id),\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n    }),\r\n  }));\r\n\r\n  return (\r\n    <div\r\n      ref={drop}\r\n      style={{\r\n        width: '100px',\r\n        height: '100px',\r\n        margin: '0', // Remove margin to reduce spacing\r\n        border: '1px solid black',\r\n        backgroundImage: `url(${imageUrl})`,\r\n        backgroundSize: 'cover',\r\n        opacity: isOver ? 0.5 : 1,\r\n        backgroundColor: isCorrect ? 'lightgreen' : '',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\n// Start Page Component\r\nconst StartPage = ({ onStart }) => {\r\n  return (\r\n    <div style={{ textAlign: 'center', padding: '50px' }}>\r\n      <h1>Welcome to the Drag and Drop Game!</h1>\r\n      <button onClick={onStart} style={{ padding: '10px', fontSize: '16px' }}>\r\n        Start Game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Game = () => {\r\n  const [score, setScore] = useState(0);\r\n  const [errors, setErrors] = useState(0);\r\n  const [milliseconds, setMilliseconds] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [userName, setUserName] = useState('');\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [gameStarted, setGameStarted] = useState(false); // Track if game is started\r\n\r\n  const [boxes, setBoxes] = useState([\r\n    { id: '1', text: 'Box 1', correctImageId: 'image1' },\r\n    { id: '2', text: 'Box 2', correctImageId: 'image2' },\r\n    { id: '3', text: 'Box 3', correctImageId: 'image3' },\r\n    { id: '4', text: 'Box 4', correctImageId: 'image4' },\r\n    { id: '5', text: 'Box 5', correctImageId: 'image5' },\r\n    { id: '6', text: 'Box 6', correctImageId: 'image6' },\r\n    { id: '7', text: 'Box 7', correctImageId: 'image7' },\r\n    { id: '8', text: 'Box 8', correctImageId: 'image8' },\r\n    { id: '9', text: 'Box 9', correctImageId: 'image9' },\r\n  ]);\r\n\r\n  const [droppedBoxes, setDroppedBoxes] = useState({});\r\n\r\n  // Function to format time in MM:SS:mmm format\r\n  const formatTime = (ms) => {\r\n    const minutes = Math.floor(ms / 60000);\r\n    const seconds = Math.floor((ms % 60000) / 1000);\r\n    const milliseconds = ms % 1000;\r\n    return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}:${String(milliseconds).padStart(3, '0')}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!gameOver && gameStarted) {\r\n      const interval = setInterval(() => {\r\n        setMilliseconds((prev) => prev + 10); // Update every 10ms for precision\r\n      }, 10);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [gameOver, gameStarted]);\r\n\r\n  const handleDrop = (boxId, targetImageId) => {\r\n    const box = boxes.find((b) => b.id === boxId);\r\n    if (box.correctImageId === targetImageId) {\r\n      setScore((prev) => prev + 1);\r\n      setDroppedBoxes((prev) => ({ ...prev, [boxId]: true }));\r\n    } else {\r\n      setErrors((prev) => prev + 1);\r\n      setDroppedBoxes((prev) => ({ ...prev, [boxId]: false }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(droppedBoxes).length === boxes.length) {\r\n      const allCorrect = boxes.every((box) => droppedBoxes[box.id] === true);\r\n      if (allCorrect) {\r\n        setGameOver(true);\r\n        handleGameOver();\r\n      }\r\n    }\r\n  }, [droppedBoxes, boxes]);\r\n\r\n  const shuffleBoxes = (array) => {\r\n    let currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n\r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  const handleGameOver = () => {\r\n    const newEntry = {\r\n      name: userName,\r\n      time: milliseconds,\r\n      errors: errors,\r\n    };\r\n\r\n    const savedLeaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];\r\n    \r\n    const existingEntryIndex = savedLeaderboard.findIndex(entry => entry.name === userName);\r\n    if (existingEntryIndex >= 0) {\r\n      const existingEntry = savedLeaderboard[existingEntryIndex];\r\n      \r\n      if (milliseconds < existingEntry.time || (milliseconds === existingEntry.time && errors < existingEntry.errors)) {\r\n        savedLeaderboard[existingEntryIndex] = newEntry;\r\n      }\r\n    } else {\r\n      savedLeaderboard.push(newEntry);\r\n    }\r\n\r\n    savedLeaderboard.sort((a, b) => {\r\n      if (a.time === b.time) {\r\n        return a.errors - b.errors;\r\n      }\r\n      return a.time - b.time;\r\n    });\r\n\r\n    localStorage.setItem('leaderboard', JSON.stringify(savedLeaderboard));\r\n    setLeaderboard(savedLeaderboard);\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setScore(0);\r\n    setErrors(0);\r\n    setMilliseconds(0);\r\n    setDroppedBoxes({});\r\n    setGameOver(false);\r\n    setUserName('');\r\n\r\n    setBoxes(shuffleBoxes([\r\n      { id: '1', text: 'Box 1', correctImageId: 'image1' },\r\n      { id: '2', text: 'Box 2', correctImageId: 'image2' },\r\n      { id: '3', text: 'Box 3', correctImageId: 'image3' },\r\n      { id: '4', text: 'Box 4', correctImageId: 'image4' },\r\n      { id: '5', text: 'Box 5', correctImageId: 'image5' },\r\n      { id: '6', text: 'Box 6', correctImageId: 'image6' },\r\n      { id: '7', text: 'Box 7', correctImageId: 'image7' },\r\n      { id: '8', text: 'Box 8', correctImageId: 'image8' },\r\n      { id: '9', text: 'Box 9', correctImageId: 'image9' },\r\n    ]));\r\n  };\r\n\r\n  const handleMenu = () => {\r\n    setGameStarted(false); // Go back to the start page\r\n  };\r\n\r\n  // Render StartPage if the game hasn't started\r\n  if (!gameStarted) {\r\n    return <StartPage onStart={() => setGameStarted(true)} />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n      {/* Main Game Area */}\r\n      <div style={{ textAlign: 'center', flexGrow: 1 }}>\r\n        <h1>Drag and Drop Game</h1>\r\n        <h2>Score: {score}</h2>\r\n        <h2>Errors: {errors}</h2>\r\n        <h2>Timer: {formatTime(milliseconds)}</h2> {/* Display the timer in MM:SS:mmm format */}\r\n\r\n        {/* Grid for images (drop zones) */}\r\n        <div style={{ \r\n          display: 'grid', \r\n          gridTemplateColumns: 'repeat(3, 100px)', \r\n          gridGap: '0px', \r\n          justifyContent: 'center', \r\n          marginBottom: '20px' \r\n        }}>\r\n          {boxes.slice(0, 9).map((box, index) => (\r\n            <DropZone\r\n              key={index}\r\n              id={`image${index + 1}`}\r\n              imageUrl={`https://via.placeholder.com/100?text=Image${index + 1}`}\r\n              onDrop={handleDrop}\r\n              isCorrect={droppedBoxes[box.id] === true}\r\n            />\r\n          ))}\r\n        </div>\r\n\r\n        {/* Grid for draggable boxes */}\r\n        <div style={{ \r\n          display: 'grid', \r\n          gridTemplateColumns: 'repeat(3, 100px)', \r\n          gridGap: '0px', \r\n          justifyContent: 'center' \r\n        }}>\r\n          {boxes.map((box) => (\r\n            <DraggableBox key={box.id} {...box} />\r\n          ))}\r\n        </div>\r\n\r\n        {gameOver && (\r\n          <div>\r\n            <h2>You Win!</h2>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter your name\"\r\n              value={userName}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <button onClick={handleRestart} style={{ padding: '10px', marginTop: '20px' }}>\r\n          Restart\r\n        </button>\r\n\r\n        {/* Menu button to go back to start page */}\r\n        <button onClick={handleMenu} style={{ padding: '10px', marginTop: '10px' }}>\r\n          Menu\r\n        </button>\r\n      </div>\r\n\r\n      {/* Leaderboard Area */}\r\n      <div style={{ width: '200px', textAlign: 'left', padding: '20px', backgroundColor: '#f9f9f9', borderLeft: '1px solid #ccc' }}>\r\n        <h2>Leaderboard</h2>\r\n        <ul>\r\n          {leaderboard.map((entry, index) => (\r\n            <li key={index}>\r\n              {entry.name}: {formatTime(entry.time)} | Errors: {entry.errors}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","// src/Login.js\r\nimport React, { useState } from 'react';\r\n\r\nconst Login = ({ onLogin }) => {\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Basic validation\r\n    if (!name || !phone) {\r\n      alert('Please fill in both fields.');\r\n      return;\r\n    }\r\n\r\n    // Call onLogin with the user's name and phone number\r\n    onLogin({ name, phone });\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n      <h2>Login to Play</h2>\r\n      <form onSubmit={handleSubmit} style={{ display: 'inline-block', textAlign: 'left' }}>\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <label>\r\n            Name:\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              style={{ marginLeft: '10px' }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <label>\r\n            Phone Number:\r\n            <input\r\n              type=\"tel\"\r\n              value={phone}\r\n              onChange={(e) => setPhone(e.target.value)}\r\n              style={{ marginLeft: '10px' }}\r\n            />\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Game from './Game';  // The Game component\nimport Login from './Login';  // The Login component\n\nconst App = () => {\n  const [user, setUser] = useState(null); // Track the logged-in user\n  const [gameStarted, setGameStarted] = useState(false); // Track if the game has started\n\n  // Check localStorage for persisted user data on initial load\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  const handleLogin = (userData) => {\n    setUser(userData); // Set the user data after successful login\n    localStorage.setItem('user', JSON.stringify(userData)); // Save the user data to localStorage\n  };\n\n  const handleStartGame = () => {\n    setGameStarted(true); // Set game as started when the button is clicked\n  };\n\n  const handleLogout = () => {\n    setUser(null); // Clear the user data\n    setGameStarted(false); // Reset the game\n    localStorage.removeItem('user'); // Remove user data from localStorage\n  };\n\n  return (\n    <div>\n      {!user ? (\n        <Login onLogin={handleLogin} />\n      ) : !gameStarted ? (  // Check if the game has not started\n        <div style={{ textAlign: 'center', marginTop: '50px' }}>\n          <h1>Welcome, {user.name}!</h1>\n          <p>Phone: {user.phone}</p>\n          <button onClick={handleStartGame} style={{ padding: '10px 20px', fontSize: '16px' }}>\n            Start Game\n          </button>\n          <br />\n          <button onClick={handleLogout} style={{ padding: '5px 10px', marginTop: '20px', fontSize: '12px' }}>\n            Logout\n          </button>\n        </div>\n      ) : (\n        <DndProvider backend={HTML5Backend}>\n          <Game />\n        </DndProvider>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}